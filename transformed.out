#^run.js&^/**
 * Initializes the router for handling run requests.
 * @param {Object} node - The node object.
 * @returns {Object} - The router object.
 */
const init = (node) => {
  /**
   * Handles the run request.
   * @param {Object} req - The request object.
   * @param {Object} res - The response object.
   */
  const run = async (req, res) => {
    console.log("run called");
    let body = req.body;
    const args = { ...req.params };
    delete args.actionname;
    delete args.pk;
    try {
      const kp = { publicKey: Buffer.from(req.params.pk, "hex") };
      const sub = node.getSub(kp, req.params.actionname);
      console.log(sub.publicKey.toString("hex"));
      const lbkey = await node.lbfind(sub);
      console.log({ body: body, args: args });
      const output = await node.runKey(Buffer.from(lbkey[0], "hex"), body || args, { reusableSocket: false });
      console.log("output:", output);
      if (typeof output == "object")
        res.write(JSON.stringify(output));
      else if (typeof output == "string")
        res.write(output);
      res.status(200).end();
    } catch (err) {
      res.write(JSON.stringify(err));
      res.status(500).end();
    }
  };

  /**
   * Handles the find request.
   * @param {Object} req - The request object.
   * @param {Object} res - The response object.
   */
  const find = async (req, res) => {
    console.log("find called", req.params);
    try {
      const kp = { publicKey: Buffer.from(req.params.pk, "hex") };
      const sub = node.getSub(kp, req.params.actionname);
      console.log(sub.publicKey.toString("hex"));
      const lbkey = await node.lbfind(sub);
      const found = JSON.stringify(lbkey);
      console.log({ found: found });
      res.write(found);
      res.status(200).end();
    } catch (err) {
      console.log(err);
      res.write(JSON.stringify(err));
      res.status(500).end();
    }
  };

  const router = express.Router();
  router.get("/:pk/:actionname", run);
  router.get("/find/:pk/:actionname", find);
  router.post("/:pk/:actionname", run);
  return router;
};

module.exports = init;
#^server.js&^/**
 * Loads the environment variables and starts the server.
 */
require("dotenv").config();

const express = require("express");
const tasks = require("./tasks.js");
const run = require("./run.js");
const fs = require("fs");
const node = require("hyper-ipc-secure")();

/**
 * Creates a folder if it doesn't exist.
 * @param {string} folderPath - The path of the folder.
 */
function createFolderIfNotExists(folderPath) {
  if (!fs.existsSync(folderPath)) {
    // If the folder doesn't exist, create it
    fs.mkdirSync(folderPath);
    console.log(`Folder "${folderPath}" created.`);
  } else {
    console.log(`Folder "${folderPath}" already exists.`);
  }
}

createFolderIfNotExists("saves");

const app = express();
const port = process.env.PORT || 3011;

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use((function (req, res, next) {
  res.setHeader("Access-Control-Allow-Origin", "https://svelvet.lan.247420.xyz");
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS, PUT, PATCH, DELETE");
  res.setHeader("Access-Control-Allow-Headers", "X-Requested-With, content-type");
  res.setHeader("Access-Control-Allow-Credentials", true);
  next();
}));

app.use("/task", tasks(node));
app.use("/run", run(node));

app.listen(port, (() => {
  console.log(`Example app listening on port ${port}`);
}));
#^tasks.js&^/**
 * Initializes the router for handling tasks requests.
 * @param {Object} node - The node object.
 * @returns {Object} - The router object.
 */
const init = (node) => {
  /**
   * Handles the save task request.
   * @param {Object} req - The request object.
   * @param {Object} res - The response object.
   */
  const saveTask = async (req, res) => {
    console.log(req);
    fs.writeFileSync(`saves/${req.params.name}.json`, JSON.stringify(req.body));
    res.write("{success:true}");
    res.status(200).end();
  };

  /**
   * Handles the load task request.
   * @param {Object} req - The request object.
   * @param {Object} res - The response object.
   */
  const loadTask = async (req, res) => {
    console.log("loading task");
    try {
      const name = `saves/${req.params.name}.json`;
      res.write(fs.readFileSync(name));
      res.status(200).end();
    } catch (e) {
      console.error(e);
      res.write(JSON.stringify({ error: e }));
      res.status(500).end();
    }
  };

  /**
   * Handles the run task request.
   * @param {Object} req - The request object.
   * @param {Object} res - The response object.
   */
  const runTask = async (req, res) => {
    console.log("run called");
    var params = req.params;
    let body = req.body,
      pk = req.params.pk;
    const args = { ...req.params };
    console.log({ body: body, args: args });
    delete args.actionname;
    delete args.pk;
    try {
      console.log("running", pk, params);
      const kp = { publicKey: Buffer.from(pk, "hex") };
      const lbkey = await node.lbfind(kp, "tasks");
      const output = await node.runKey(Buffer.from(lbkey[0], "hex"), { name: req.params.actionname, pk: req.params.pk, params: body || args });
      console.log("output:", output);
      if (typeof output == "object")
        res.write(JSON.stringify(output));
      else if (typeof output == "string")
        res.write(output);
      res.status(200).end();
    } catch (err) {
      res.write(JSON.stringify(err));
      res.status(500).end();
    }
  };

  const router = express.Router();
  router.get("/load/:name", loadTask);
  router.post("/run/:pk/:actionname", runTask);
  router.post("/save/:name", saveTask);
  return router;
};

module.exports = init;